// components/DataStream.tsx
'use client';

import { useState, useMemo, useRef, useEffect } from 'react';
import Link from 'next/link';
import { motion, AnimatePresence, useInView } from 'framer-motion';
import { useEngagementScores } from '@/hooks/useEngagementScores';
import { adaptToCardProps } from '@/lib/adapters';
import type { CardProps } from '@/types';
import NewsCard from './NewsCard';
import { ContentBlock } from './ContentBlock';
import styles from './DataStream.module.css';

const containerVariants = {
  hidden: { opacity: 0, y: 50 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.8, ease: 'easeOut', delay: 0.2 } }
};

const FireIcon = () => (
  <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
    <path d="M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 3 10.64 3 14.5c0 4.28 4.03 8.5 9 8.5s9-4.22 9-8.5c0-3.35-2.07-6.23-5.25-7.61l.01.36c0 2.07-1.56 3.73-3.63 3.73-2.06 0-3.41-1.67-3.41-3.73 0-2.15.74-4.8.74-4.8z" />
  </svg>
);

export default function DataStream({ news: rawNews }: { news: any[] }) {
  const [tickerIndex, setTickerIndex] = useState(0);
  const engagementScores = useEngagementScores();
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });

  const allNews = useMemo(() => 
    rawNews.map(adaptToCardProps).filter((n): n is CardProps => !!n), 
  [rawNews]);

  const { viralNews, latestNews } = useMemo(() => {
    const scoresMap = new Map(engagementScores.map(s => [s.id, s.engagementScore]));
    const sortedByViral = [...allNews].sort((a, b) => 
      (scoresMap.get(b.id) || 0) - (scoresMap.get(a.id) || 0)
    );
    const viral = sortedByViral.slice(0, 3);
    const viralIds = new Set(viral.map(n => n.id));
    const latest = allNews.filter(n => !viralIds.has(n.id));
    return { viralNews: viral, latestNews: latest };
  }, [allNews, engagementScores]);

  useEffect(() => {
    if (latestNews.length > 1) {
      const interval = setInterval(() => {
        setTickerIndex(prev => (prev + 1) % latestNews.length);
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [latestNews.length]);

  if (!allNews || allNews.length === 0) return null;

  return (
    <motion.div 
      ref={ref}
      variants={containerVariants}
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      className={styles.streamContainer}
    >
      <ContentBlock title="موجز البيانات">
        <div className={styles.streamLayout}>
          <div className={styles.viralNews}>
            {viralNews.map(item => (
              <div key={item.id} className={styles.viralCardWrapper}>
                <div className={styles.viralBadge}><FireIcon /> الأكثر رواجاً</div>
                <NewsCard item={item} />
              </div>
            ))}
          </div>
          <div className={styles.newsTicker}>
            <div className={styles.tickerHeader}>
              <div className={styles.tickerLiveIndicator} />
              <span>آخر الأخبار</span>
            </div>
            <div className={styles.tickerList}>
              <AnimatePresence mode="wait">
                <motion.div
                  key={tickerIndex}
                  className={styles.tickerItem}
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -30 }}
                  transition={{ duration: 0.5, ease: 'easeInOut' }}
                >
                  <Link href={`/news/${latestNews[tickerIndex].slug}`} className="no-underline">
                    <h4>{latestNews[tickerIndex].title}</h4>
                    <p>{latestNews[tickerIndex].date}</p>
                  </Link>
                </motion.div>
              </AnimatePresence>
            </div>
          </div>
        </div>
      </ContentBlock>
    </motion.div>
  );
}